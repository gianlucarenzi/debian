#!/bin/bash
#
# $Id: common.conf,v 1.16 2020/06/26 06:23:04 gianluca Exp $
#
# File di configurazione comune alle varie schede

# Linux section
KERNEL="linux-3.12.1"
KERNELVER="$KERNEL.tar.bz2"
NILFS2_KERNEL_PATCH_INSTALL="no"
PHY_MXS_USB_KERNEL_PATCH_INSTALL="yes"
INSTALL_BLUEGIGA_WIFI="yes"

WIFI="no-wifi"
#WIFI="wifi"
# Wifi BlueGiga Userspace vars
BLUEGIGA_FILE_USERSPACE="wf111-userspace-5.2.1-20-linux-armv5-bin-ekpatch03.tar.gz"
#BLUEGIGA_FILE_USERSPACE_VER=521
# Nel caso in cui gli helper siano inglobati nel driver ( >= 5.2.2)
BLUEGIGA_FILE_USERSPACE_VER=522
# Wifi BlueGiga Driver vars
BLUEGIGA_DRIVER_VER=522
BLUEGIGA_DRIVER_FILE_OLD="wf111-driver-5.2.1-20-linux-all-src.tar.gz"
BLUEGIGA_DRIVER_FILE_SRCDIR_OLD="csr_wifi_5.2.1"
BLUEGIGA_DRIVER_FILE="wf111-linux-driver_5.2.2-r1_armv5t.tar.gz"
BLUEGIGA_DRIVER_FILE_SRCDIR="wf111-linux-driver_5.2.2-r1_armv5t"

MODE="STANDARD"
# La modalita` di RECOVERY e` da considerarsi obsoleta e si utilizza
# il boot da uSD per il ripristino del sistema corrotto.
#MODE="RECOVERY"
CLEAN="yes"
#CLEAN="no"
UPDATEROOTFS="yes"
#UPDATEROOTFS="no"
MACHINENAME=`uname -n`
_mDISTRO=`/usr/bin/lsb_release -s -i`
_mCODENAME=`/usr/bin/lsb_release -s -c`
_mRELEASE=`/usr/bin/lsb_release -s -r`
if [ "$MACHINENAME" != "edelin" ]; then
	# Consideriamo il fatto che il build si possa anche fare al di fuori
	# della propria macchina virtuale.
	case "$_mCODENAME" in
		wheezy | stretch | buster)
			# Con Debian il lancio di sudoers si e` ROOT a tutti gli
			# effetti e non come una Ubuntu od altre che si rimane
			# utente privilegiato!
			_mUSERNAME=`/usr/bin/users | awk '{print $1}'`
			PRJROOT=/home/$_mUSERNAME/Progetti/iMX28
			BOOTROMROOT=$PRJROOT/bootrom
			HOMEDIR=/home/$_mUSERNAME
			;;
		*)
			PRJROOT=$HOME/Progetti/iMX28
			BOOTROMROOT=$PRJROOT/bootrom
			HOMEDIR="${HOME}"
			;;
	esac
else
	# Nella Debian Edelin quando si diventa sudoers si e` ROOT e non
	# utente user con privilegi di root!
	PRJROOT=/home/eurek/Progetti/iMX28
	BOOTROMROOT=$PRJROOT/bootrom
	HOMEDIR="/home/eurek"
fi

# Architecture
mARCH=armel

# Common path
CROSS_GCC_INSTALL_PATH="${HOMEDIR}/arm-none-linux-gnueabi"
CROSS_GCC_INSTALL="${HOMEDIR}"
CROSS_GCC="${HOMEDIR}/arm-none-linux-gnueabi/bin"
ROOTFS_DIR="${HOMEDIR}/rootfs-edelin"
ROOTFS_DEVELOPMENT_DIR="${HOMEDIR}/debian-systems"

# RootFileSystem image size (in megabytes)
IMAGE_DISK_SIZE_MB=900
#INSTALL_METHOD="RSYNC"
INSTALL_METHOD="COPY"
#INSTALL_BOOST="boost"
INSTALL_BOOST="normal"

# Virtual Disk SDCard Creation defs
VIRTUAL_DRIVE="/dev/nbd0"
VIRTUAL_DISK_IMAGE_SIZE_MB="3600M"

# Bootlets section
BOOTLETS_IVT="ivt"
BOOTLETS_WITHSD="nosd"
BOOTLETS_STARTSECTOR=8193
BOOTLETS_IS_FSL="no-fsl"

# LTIB section
USELTIB="no"
LTIB="no-ltib"

# FORCE MEMTEST ON ALL AVAILABLE MEMORY
INHOUSE_MEMTEST="no"
#INHOUSE_MEMTEST="yes"
MEMTEST_WORDS_FULL=33030144
MEMTEST_WORDS_EMPTY=0

# PACKAGES LIST
PACKAGES_LIST="$PACKAGES_LIST cross_gcc "                                                                         # Cross GCC
PACKAGES_LIST="$PACKAGES_LIST sb_loader "                                                                         # sbloader and sbbuilder
PACKAGES_LIST="$PACKAGES_LIST cross_gcc barebox "                                                                 # BareBox Bootloader
PACKAGES_LIST="$PACKAGES_LIST cross_gcc linux "                                                                   # Linux Kernel
PACKAGES_LIST="$PACKAGES_LIST cross_gcc linux linux_drivers "                                                     # Linux Drivers
PACKAGES_LIST="$PACKAGES_LIST cross_gcc linux linux_drivers wifi "                                                # External Linux Driver for WiFi
PACKAGES_LIST="$PACKAGES_LIST cross_gcc linux linux_drivers wifi_helpers "                                        # Helpers for using Driver for WiFi
PACKAGES_LIST="$PACKAGES_LIST cross_gcc linux linux_drivers custom_drivers "                                      # Compile and install external custom drivers
PACKAGES_LIST="$PACKAGES_LIST cross_gcc linux linux_drivers linux_install "                                       # Install Drivers and Kernel into system
PACKAGES_LIST="$PACKAGES_LIST sbtools "                                                                           # elftosb 10.12.01
PACKAGES_LIST="$PACKAGES_LIST sb_loader cross_gcc barebox bootlets "                                              # Bootlets
PACKAGES_LIST="$PACKAGES_LIST sb_loader cross_gcc barebox bootlets barebox_bootlets "                             # Barebox + Bootlets creation utility
PACKAGES_LIST="$PACKAGES_LIST cross_gcc firmware"                                                                 # Firmware Building if needed
PACKAGES_LIST="$PACKAGES_LIST sb_loader cross_gcc barebox bootlets barebox_bootlets recovery "                    # Barebox + Bootlets creation utility
PACKAGES_LIST="$PACKAGES_LIST cross_gcc recovery custom_executable "                                              # Install custom executables into system
PACKAGES_LIST="$PACKAGES_LIST sb_loader cross_gcc barebox bootlets barebox_bootlets recovery finishing_recovery " # Finishing installation

source ./distro.conf
